<h2>qu'est ce qu'une constante de class</h2>
<p>Une const. de class est une val. fixe, immuable, qui appartient √† une class et non √† un objet</p>
<p>Elle se d√©clare par le mot-cl√© const, pas de $ et en MAJ</p>
<p>ON PEUT AUSSI D√©FINIR UNE CONST EN PHP PROC√©DURAL avec :: define ("NOM_DE_LA_CONST", "val. de la const") <br>
</p>


<?php
class MaClass{
    public const MACONSTANTE = "ü§ñVal. de la const.";
}
echo MaClass::MACONSTANTE;


class Exemple {
    private const TVA = 0.2;

    public function getTVA(): float {
        return self::TVA;
    }
}
?>
<p>Acc√©s √† la const. ::: <code>MaClass::MACONSTANTE</code></p>
<h2>Static</h2>
<p>le mot-cl√© static est utilis√© pour d√©clarer des Pt√©s et des method qui appartiennent 
    √† la class elle-m√™me, et non aux instances de cette classe</p>
<p>Les m√©thodes et Pt√©s static peuvent √™tre r√©cup√©r√©es ss cr√©er d'objet de la classe</p>
<p>exemple</p>
<li>public static $test</li>
<li>public static function test() : void</li>
<?php
class CourPhp{
    public const VERSION = "üôÄ 1.0.0"; // const. de classe
    public static $nbInstances = 0; // Pt√© statique

    private static $prive = "je suis vivible en passant par les method de la class"; 
    private $nom;

    public function __construct($nom)
    {
        $this->nom = $nom;
        self::$nbInstances++;  //
    }
    private static function staticFunctionPrivate() { 
        // method priv√©e  ON ne peut pas l'appeler depuis l'ext. :::peut sortir de la class/√™tre exprim√©e via une autre Fo
        // on appelle la method STATIC PRIVATE depuis l'ext. avec une m√©thode staticPUBLIC
        echo "je suis uen m√©thode static priv√©e";
    }
    public static function afficherNbInstances() : void {
        echo "Total des instances : " . self::$nbInstances . " "; echo"<br>";
        echo self::$prive;                                        echo"<br>";
        self::staticFunctionPrivate();                            echo"<br>";
    }
}
echo CourPhp::VERSION;          echo"<br>";
echo CourPhp::$nbInstances;     echo"<br>";
$eleve1 = new CourPhp("adam");  echo"<br>";
$eleve1 = new CourPhp("adam");  echo"<br>";

CourPhp::afficherNbInstances(); echo"<br>"; // === $eleve1->afficherNbInstances();
class CourStatic extends CourPhp{
    public const VERSION = "2.0.0";
}
echo CourStatic::VERSION; // SEUL MOYEN DE "MODIFIER  on a chang√© la val de la const VIA L'ENFANT

// on ne met pas de tab. dans une const


// ON NE PEUT PAS MODIFIER LA CONST;

// self (===ma class)::$nbInstances POUR UNE Pt√© STATIC === CourPhp::VERSION pour CONST.
// üëâ On utilise self:: pour acc√©der √† :
// - une constante de classe
// - une m√©thode statique
// - ou un √©l√©ment d√©fini au niveau de la classe (et pas de l‚Äôobjet)
// instance =un objet
// class Exemple {
//     private const TVA = 0.2;

//     public function getTVA(): float {
//         return self::TVA;
//     }
// }

class Constconfig{
    public const PATH= "http://localhost/PHP/POO/constante_static.php";
    public const PATHLINK= "http://localhost/PHP/POO/constante_static.php";
}

class StatutCommande{
    public const EN_ATTENTE = 'en attente';
    public const VALIDE = 'valide';
    public const ANNULEE = 'annulee';
}
$statut =StatutCommande::EN_ATTENTE;
switch ($statut) {
    case StatutCommande::VALIDE:
        echo "‚úÖ comm VALID√©e <br>";
        break;
    
        case StatutCommande::ANNULEE:
            echo "‚ùå comm annul√©e <br>";
            break;
}
?>