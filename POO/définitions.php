<?php
// ================================================================
//  D√©finitions PHP Orient√© Objet
// ================================================================
/**
* ‚û°Ô∏è CLASS
*
* Une class est un mod√®le (un plan) qui d√©finit des propri√©t√©s (attributs) et des m√©thodes (comportements).
* Elle sert √† fabriquer des objets.
* Exemple :
* class Voiture { ... }
*/
/**
* ‚û°Ô∏è OBJET
*
* Un objet est une instance concr√®te d'une classe.
* C'est une variable bas√©e sur un mod√®le d√©fini par une class.
* Exemple :
* $voiture1 = new Voiture();
*/
/**
* ‚û°Ô∏è CONSTANTE
*
* Une constante est une valeur qui ne change pas pendant l'ex√©cution du programme.
* Elle se d√©clare avec `const` dans une classe.
* Exemple :
* public const TYPE = "Vehicule";
*/
/**
* ‚û°Ô∏è HERITAGE
*
* L'h√©ritage permet √† une classe d'h√©riter des propri√©t√©s et des m√©thodes d'une autre classe.
* Cela √©vite de dupliquer du code.
* Exemple :
* class Moto extends Vehicule { ... }
*/
/**
* ‚û°Ô∏è INSTANCIATION
*
* L'instanciation est le fait de cr√©er un objet bas√© sur une classe.
* Cela se fait avec `new`.
* Exemple :
* $moto = new Moto();
*/
/**
* ‚û°Ô∏è METHODE
*
* Une m√©thode est une fonction d√©finie √† l'int√©rieur d'une classe.
* Elle repr√©sente un comportement ou une action sur l'objet.
* Exemple :
* public function demarrer() { ... }
*/
/**
* ‚û°Ô∏è METHODE MAGIQUE
*
* Les m√©thodes magiques sont des m√©thodes sp√©ciales pr√©d√©finies en PHP.
* Elles commencent et finissent par deux underscores __.
* Elles sont appel√©es automatiquement dans certaines situations (cr√©ation, acc√®s, appel de m√©thode inconnue, etc.)
* Exemples :
* - __construct()  ‚ûî appel√©e √† la cr√©ation de l'objet
* - __destruct()   ‚ûî appel√©e √† la destruction de l'objet
* - __get(), __set(), __call(), __clone(), __invoke(), etc.
*/
/**
* ‚û°Ô∏è PUBLIC
*
* Le mot-cl√© public rend la propri√©t√© ou la m√©thode accessible de partout (dans et hors de la classe).
* Exemple :
* public $marque;
*/
/**
* ‚û°Ô∏è PRIVATE
*
* Le mot-cl√© private rend la propri√©t√© ou la m√©thode accessible uniquement √† l'int√©rieur de la classe o√π elle est d√©finie.
* Exemple :
* private $moteur;
*/
/**
* ‚û°Ô∏è PROTECTED
*
* Le mot-cl√© protected rend la propri√©t√© ou la m√©thode accessible uniquement √† l'int√©rieur de la classe
* et des classes qui h√©ritent de cette classe (h√©ritage).
* Exemple :
* protected $vitesse;
*/
// ================================================================
//
// ================================================================
?>
<?php

// ============================================
// Cours Complet : Les M√©thodes Magiques en PHP
// PHP Orient√© Objet
// Fichier 100% ex√©cutable pour apprentissage
// ============================================

/**
 * üìö D√©finition :
 *
 * En PHP, une "m√©thode magique" est une m√©thode sp√©ciale :
 * - Elle commence et finit par deux underscores (__)
 * - Elle est automatiquement appel√©e par PHP
 * - Elle r√©agit √† certains √©v√®nements sur l'objet (cr√©ation, lecture de propri√©t√©, appel de m√©thode inconnue, etc.)
 *
 * üí¨ Elles permettent d'ajouter du comportement automatique dans ton code objet.
 */
class Magie {
    public $visible = "Je suis une propri√©t√© publique !";

    // ===========================================
    // 1. __construct() - Initialisation de l'objet
    // ===========================================
    public function __construct() {
        echo "[__construct] ‚ûú L‚Äôobjet est instanci√©.<br>";
    }
    // =====================================
    // 2. __destruct() - Nettoyage √† la fin
    // =====================================
    public function __destruct() {
        echo "[__destruct] ‚ûú L‚Äôobjet est d√©truit automatiquement.<br>";
    }
    // ==================================================
    // 3. __get() - Lecture d'une propri√©t√© inaccessible
    // ==================================================
    public function __get($propriete) {
        echo "[__get] ‚ûú La propri√©t√© '$propriete' est inaccessible ou inexistante.<br>";
    }
    // =========================================================
    // 4. __set() - Affectation d'une propri√©t√© inaccessible
    // =========================================================
    public function __set($propriete, $valeur) {
        echo "[__set] ‚ûú Vous essayez de d√©finir '$propriete' √† la valeur '$valeur'.<br>";
    }
    // ===============================================================
    // 5. __isset() - V√©rification isset() ou empty() sur propri√©t√© inaccessible
    // ===============================================================
    public function __isset($propriete) {
        echo "[__isset] ‚ûú isset() appel√© sur '$propriete'.<br>";
        return false;
    }
    // ==================================================
    // 6. __unset() - Suppression d'une propri√©t√© inaccessible
    // ==================================================
    public function __unset($propriete) {
        echo "[__unset] ‚ûú unset() appel√© sur '$propriete'.<br>";
    }
    // ==========================================
    // 7. __call() - Appel de m√©thode non d√©finie
    // ==========================================
    public function __call($nom, $arguments) {
        echo "[__call] ‚ûú M√©thode '$nom' appel√©e avec arguments : " . implode(', ', $arguments) . "<br>";
    }
    // ====================================================
    // 8. __callStatic() - Appel de m√©thode statique inconnue
    // ====================================================
    public static function __callStatic($nom, $arguments) {
        echo "[__callStatic] ‚ûú Appel statique de '$nom' avec arguments : " . implode(', ', $arguments) . "<br>";
    }
    // ================================================
    // 9. __toString() - Conversion de l‚Äôobjet en texte
    // ================================================
    public function __toString() {
        return "[__toString] ‚ûú Objet converti en texte.<br>";
    }
    // ==========================================
    // 10. __invoke() - Appeler l'objet comme une fonction
    // ==========================================
    public function __invoke($param) {
        echo "[__invoke] ‚ûú Objet appel√© comme une fonction avec argument : $param<br>";
    }
    // ===================================
    // 11. __clone() - Clonage de l'objet
    // ===================================
    public function __clone() {
        echo "[__clone] ‚ûú Clonage de l‚Äôobjet effectu√© !<br>";
    }
}
// ===============================
// ‚ú® Tests pratiques des m√©thodes
// ===============================
echo "<h2>üîÆ Test des M√©thodes Magiques</h2>";

$obj = new Magie(); // __construct est appel√© automatiquement

// __get
echo $obj->invisible; // propri√©t√© inexistante ‚ûî __get() est d√©clench√©

// __set
$obj->secret = "top secret"; // propri√©t√© inexistante ‚ûî __set() est d√©clench√©

// __isset
isset($obj->cache); // propri√©t√© inexistante ‚ûî __isset() est d√©clench√©

// __unset
unset($obj->cache); // propri√©t√© inexistante ‚ûî __unset() est d√©clench√©

// __call
$obj->lancerSort("abracadabra", 2025); // m√©thode inexistante ‚ûî __call() est d√©clench√©

// __callStatic
Magie::appelStatique("boom"); // m√©thode statique inexistante ‚ûî __callStatic() est d√©clench√©

// __toString
echo $obj; // objet converti en texte ‚ûî __toString()

// __invoke
$obj("invoqu√©"); // objet utilis√© comme une fonction ‚ûî __invoke()

// __clone
$copie = clone $obj; // clonage ‚ûî __clone()

// Fin du script : __destruct() sera appel√© automatiquement
?>
