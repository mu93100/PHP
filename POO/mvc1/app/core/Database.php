<?php
// Namespace pour que cette classe soit correctement auto-chargÃ©e
namespace app\core;

// Importation de la classe PDO et PDOException pour gÃ©rer la BDD
use PDO;
use PDOException;

// Classe qui gÃ¨re la connexion Ã  la base de donnÃ©es avec PDO (Design Pattern Singleton)
class Database {
    // Attribut statique qui contiendra l'unique instance de la classe
    private static $instance = null;

    // Attribut privÃ© qui stocke la connexion PDO
    private $conn;

    // Constructeur privÃ© â†’ empÃªche lâ€™instanciation directe (singleton)
    private function __construct() {
        try {
            // CrÃ©ation de l'objet PDO avec les constantes de config (voir config.php)
            $this->conn = new PDO(
                "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, // Ex : mysql:host=localhost;dbname=mvc
                DB_USER,     // Nom dâ€™utilisateur
                DB_PASS,     // Mot de passe
                [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,          // Active les exceptions sur erreur
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,     // Retourne les rÃ©sultats sous forme de tableau associatif
                    PDO::ATTR_EMULATE_PREPARES => false                   // DÃ©sactive l'Ã©mulation des requÃªtes prÃ©parÃ©es
                ]
            );
        } catch (PDOException $e) {
            // En cas dâ€™erreur de connexion â†’ stoppe le script et affiche un message
            die("Database Connection Error: " . $e->getMessage());
        }
    }

    // ðŸ“¦ MÃ©thode statique pour accÃ©der Ã  lâ€™unique instance (singleton)
    public static function getInstance() {
        // Si aucune instance nâ€™existe, on en crÃ©e une
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    // ðŸ”Œ Retourne lâ€™objet PDO directement (utile si besoin personnalisÃ©)
    public function getConnection() {
        return $this->conn;
    }

    // ðŸ”Ž ExÃ©cute une requÃªte SQL prÃ©parÃ©e avec paramÃ¨tres
    public function query($sql, $params = []) {
        try {
            // PrÃ©pare la requÃªte SQL
            $stmt = $this->conn->prepare($sql);

            // ExÃ©cute la requÃªte avec les paramÃ¨tres passÃ©s (sÃ©curisÃ© contre les injections SQL)
            $stmt->execute($params);

            // Retourne lâ€™objet statement (PDOStatement) pour enchaÃ®ner un fetch par exemple
            return $stmt;
        } catch (PDOException $e) {
            // En cas d'erreur dans la requÃªte
            die("Query Error: " . $e->getMessage());
        }
    }

    // ðŸ§¾ RÃ©cupÃ¨re plusieurs rÃ©sultats (plusieurs lignes)
    public function fetchAll($sql, $params = []) {
        // Appelle la mÃ©thode query puis fetchAll sur le statement
        return $this->query($sql, $params)->fetchAll();
    }

    // ðŸ“„ RÃ©cupÃ¨re un seul rÃ©sultat (une seule ligne)
    public function fetch($sql, $params = []) {
        return $this->query($sql, $params)->fetch();
    }

    // ðŸ†” RÃ©cupÃ¨re lâ€™ID de la derniÃ¨re insertion
    public function lastInsertId() {
        return $this->conn->lastInsertId();
    }
}
